/*
 * 凡是n开头的都是对应的参数的相反的格式，例如-nbad跟-bad就相反
 */
-bad  /* 在变量声明后面添加空行,这个只对函数体内的变量有效 */
-bap /* 在函数定义结束后面加一行空行 */
//-bbb /* 在块状注释前面如果没有空行，那么就加一个空行,这个有些蛋疼，会把文件的开头插入一个空行，很不美观 */
/* 不过暂时有个解决方法，^_^ */
//-bbo /* 在if语句块中，当语句很长的时候会在bool操作符之前换行 */
//-bc /* 在声明区段中，若出现逗号即换行, 例如int i,j;i和j就会分行 */
//-bl /* if(或是else,for等等)和后面执行区段的”{”不同行，且”}”自成一行。明显不美观 */
-blf /* 函数名下一行才是大括号 */
//-bli4 /* {的缩进格数，可以试试当if后面的{跟if不同行的时候的这个参数嗲效果，这里不需要 */
//-bls /*  定义结构，"struct"和"{"分行，感觉不好看，果断启用下面嗲-brs  */
-br   /* if语句后面如果有大括号,那么大括号跟if在同一行 */
//-brf /* 函数名跟后面的大括号在同一行，不美观，所以启动-blf */
-brs /* 结构体的定义跟大括号在同一行 */
-bs /* 在sizeof后面加一个空格 */
-c4 /* 语句后注释开始于行33 */
-cbi0 /* case语句下面的大括号跟case标签在同一列，不缩进 */
-cd4 /* 变量声明后注释开始于行33 */
//-cdb /* *********************注释符号自成一行。 */
//-cdw /* ********************do while ?*/
-ce /* 将else置于”}”(if执行区段的结尾)之后。*/
//-ci100 /**************** 叙述过长而换行时，指定换行后缩排的格数。****/
-cli0 /* case标签在switch下缩进0列 */
-cp10 /* #else, #endif后面的注释开始于行33 */
//-cs /* 在强制类型转换后面加上一个空格，个人感觉没这个必要，启动-ncs */
//-d40 /* ***************针对不是放在程式码右侧的注释，配置其缩排格数。 */
//-bfda /* 函数的参数每个一行,不好看,因此启用-nbfda */
//-bfde /* 函数参数的最后一个参数跟括号分两行写,不好看 */
//-dj10 /* *************************** */
-di0 /* *************************** 将声明区段的变量置于指定的栏位。int i; i位于从int的i开始数第几列,这个好像对函数声明还有影响 */
-fc1 /* 针对放在每行最前端的注释，配置其格式。也就是对不是放在代码行后面的注释进行注释格式化 */
//-fca /* ******************************待定，配置任何注释的格式。 */
//-gnu /* 指定使用GNU的格式，此为预设值。 */
//-hnl /* *********************** */
-i4 /* 以4个空格为缩进单位进行缩进,如果为tab的整数倍，用tab来缩进，否则用空格填充 */
//-il10 /* ************************这个好像有点错误 */
//-ip5 /* 旧风格的函数定义中参数说明缩进5个空格,基本用不到，不用旧风格的函数了 */
//-kr /* 指定使用Kernighan&Ritchie的格式。 */
-l86 /*  ********************非注释行最长多少，感觉暂时没必要指定，后来实验了一下这里暂时用86个来进行,因为我的emacs的分屏以后差不多一屏长度为86*/
//-lc10 /* ************comment-line-lengthn */
//-linux /* ************************ */
-lp /* 叙述过长而换行，且叙述中包含了括弧时，将括弧中的每行起始栏位内容垂直对其排列。 */
//-lps /* leave-preprocessor-space */
/*******************华丽的分割线*******************************/
//-nlps
//-nbad /* 与-bad相反 */
//-nbap /* 参见bap */
//-nbbb /* 参见bbb */
//-nbbo /* 参见bbo */
-nbc /* 变量声明中，逗号分隔的变量不分行 */
-nbfda /* 参见bfda */
//-ncdb /* ********************************* */
//-ncdw /* ********************** "do --- while"的"while"和其前面的"}"另起一行  */
//-nce /* 参见ce */
-ncs /* 参见cs */
//-ndj10 /* ************************************* */
//-nfc1 /* 参见fc1 */
//-nfca /* *********************************参见fca */
//-nhnl /* ****************************** */
-nip /* 参见ip */
//-nlp /* 参见lp */
-npcs /* 在调用的函数名称之后，不要加上空格 */
-nprs /* 在"（"后"）"前不插入空格 */
//-npsl /* 程式类型和程式名称放在同一行。 */
//-nsaf /* for后面没有空格 */
//-nsai /* if后面没有有空格 */
//-nsaw /* while后面有空格 */
//-nsc /* 不在生成的块注释中加* */
//-nsob /* *********************不去掉可添加的空行 */
//-nss /* 一行的for语句，在";"前不加空。 */
-nut /* 不使用tab来缩进, very good */
-nv /* 不显示周详的信息。 */
//-orig /* 使用Berkeley的格式。 */
//-npro /* 不要读取indent的配置文档.indent.pro。肯定要读取的了 */
//-pcs /* 参见-npcs */
//-pi10 /* ************************* */
//-pmt /* ***************** */
//-ppi10 /* **************************** */
//-prs /* 参见nprs */
-psl /* 程式类型和程式名称不放在同一行。 */
-saf /* for后面有空格   */
-sai /* if后面有空格 */
-saw /* while后面有空格 */
//-sbi10 /* *************************** */
-sc /* 在生成的块注释中加* */
//-sob /* *************************** */
-ss /* 参见nss */
//-st /* 将结果显示在标准输出设备。暂时不要吧，估计用emacs的时候可能要 */
//-T /* 告诉indent typedef的name,暂时没看出来有什么用途 *********************** */
//-ts4 /* 配置tab的长度。这里不需要，因为我们只用空格来缩进 */
//-ut /* 使用tab来缩进,参见nut */
